<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>touboli的妙妙屋</title>
    <link>https://blog.touboli.site/</link>
    <description>Recent content on touboli的妙妙屋</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2024 14:29:14 +0800</lastBuildDate>
    <atom:link href="https://blog.touboli.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My_first_blog</title>
      <link>https://blog.touboli.site/posts/first_blog/my_first_blog/</link>
      <pubDate>Sat, 08 Jun 2024 14:29:14 +0800</pubDate>
      <guid>https://blog.touboli.site/posts/first_blog/my_first_blog/</guid>
      <description>前言 这是我的第一篇博客，以后会以一周一次的频率进行更新，主要内容是进行一周的总结，包括但不限于娱乐，比较好玩的事情，值得思考的东西，好用的软件，写的看的代码等等，是一个比较杂的博客，也并不会变成public，只是为了自己和朋友能看一看。如果有什么不准确的地方，请多多包涵，指出也是可以的，但是不合理的建议我会虚心接受，坚决不改的。
博客搭建 首先说说博客搭建吧，我采用的方案是使用hugo+github pages来进行博客搭建。
hugo hugo官方是称自己是世界上用于构建网站最快的架构，并且给出了很多网站模版给用户使用，全部都是免费开源的模版，这点我是比较喜欢的。
对我搭建博客来说，它的功能就是将我的markdown文档转化为html文件，构建成为了静态网页的内容。
github pages github pages是github出的一个静态网页管理器，这个特性是非常适合用于管理hugo生成的静态网页的内容的，而且可以用户给出自定义域，那我的域名又可以用上了，非常舒服，touboli.site再次启动。
具体步骤 安装hugo，在github上建一个username.github.io的库，使用cloudflare将域名进行处理
hugo操作 hugo new site name
在当前目录中产生一个名字为name的文件夹，里面是hugo的相关文件夹。有些地方把这种操作成为创建站点。
cd name
进入name文件夹，可以进行进一步的工作了，文件夹的内容如下
其中主要用到的文件夹是content文件夹，写的文章都是放在这里content/post文件夹中；themes文件夹，使用的网页模版来自于themes文件夹，我主要使用hugo-PaperMod模版；public，存放hugo根据content中的文章生成的静态网页；hugo.toml，hugo的配置文件，官方文档在这里，可以进行自定义配置。
hugo new my-first-post.md
这会在content/posts 目录中创建该文件，在这个文件中初始会有title信息，date信息，draft信息，一般来说hugo在构建网站时不会发布草稿内容。
hugo
控制台输入hugo命令会转化你写的markdown文档为静态网页，生成的静态网页存放到public文件夹中。
hugo server -D
启动hugo的开发服务器来查看网站，在终端会显示URL。访问可以查看效果。
更多的有关内容可以查看hugo的文档
github pages操作 点击仓库的settings，找到pages部分，将DNS部分添加为域名即可
结合hugo + github pages 将hugo的public文件夹和创建的github pages关联起来，使用git完成
在public目录下执行以下命令
git init
在当前目录下新建代码库
git remote add origin github的仓库链接
连接远程仓库
git branch
查看本地所有分支
git branch -a
查看远程所有分支
git checkout main
切换分支到main分支
git add .
添加所有文件到暂存区</description>
    </item>
  </channel>
</rss>
